##### SET 1 #####
### CatPhotApp ###
1 : HTML elements have opening tags like <h1> and closing tags like </h1>.
    The text for an element goes between its opening and closing tags.

2 : The h1 through h6 heading elements are used to signify the importance of content below them. 
    The lower the number, the higher the importance, 
    so h2 elements have less importance than h1 elements. 
    Only use one h1 element per page and place lower importance headings below higher importance headings.

3 : The p element is used to create a paragraph of text on websites.

4 : Commenting allows you to leave messages without affecting the browser display. 
    It also allows you to make code inactive. 
    A comment in HTML starts with <!--, contains any number of lines of text, and ends with -->

5 : HTML5 has some elements that identify different content areas. 
    These elements make your HTML easier to read and help with Search Engine Optimization (SEO) and accessibility.

6 : In the previous step, 
    you put the h1, h2, comment, and p elements inside the main element. 
    This is called nesting. 
    Nested elements should be placed two spaces further to the right of the element they are nested in. 
    This spacing is called indentation and it is used to make HTML easier to read.

7 : You can add images to your website by using the img element. 
    img elements have an opening tag without a closing tag. 
    A tag for an element without a closing tag is known as a self-closing tag.

8 : HTML attributes are special words used inside the opening tag of an element to control the element's behavior.
    The src attribute in an img element specifies the image's URL (where the image is located).

9 : All img elements should have an alt attribute. 
    The alt attribute's text is used for screen readers to improve accessibility and is displayed if the image fails to load.

10 : You can link to another page with the anchor (a) element

11 : A link's text must be placed between the opening and closing tags of an anchor (a) element.

12 : In the previous step you turned the words link to cat pictures into a link by placing them between opening and closing anchor (a) tags. You can do the same to words inside of an element, such as a p element.

13 : Add a target attribute with the value _blank to the anchor (a) element's opening tag, 
     so that the link opens in a new tab.

14 : In previous steps you used an anchor element to turn text into a link. 
     Other types of content can also be turned into a link by wrapping it in anchor tags. 
     Turn the image into a link by surrounding it with necessary element tags.

15 : Before adding any new content, 
     you should make use of a section element to separate the cat photos content from the future content.

16 : When you add a lower rank heading element to the page, 
     it's implied that you're starting a new subsection. 
     After the last h2 element of the second section element, 
     add an h3 element with this text:

16 : add an unordered list (ul) element. 

17 : Use list item (li) elements to create items in a list

18 : The figure element represents self-contained content and will allow you to associate an image with a caption.

19 : A figure caption (figcaption) element is used to add a caption to describe the image contained within the figure element.

20 : Emphasize the word love in the figcaption element by wrapping it in an emphasis em element.

22 : The code for an ordered list (ol) is similar to an unordered list, but list items in an ordered list are numbered when displayed.

23 : The strong element is used to indicate that some text is of strong importance or urgent.

24 : The action attribute indicates where form data should be sent. 
     For example, <form action="/submit-url"></form> tells the browser that the form data should be sent to the path /submit-url.

25 : The input element allows you several ways to collect data from a web form. 
     Like img elements, input elements are self-closing and do not need closing tags.

26 : There are many kinds of inputs you can create using the type attribute. 
     You can easily create a password field, reset button, or a control to let users select a file from their computer.

27 : In order for a form's data to be accessed by the location specified in the action attribute, 
     you must give the text field a name attribute and assign it a value to represent the data being submitted. 
     For example, you could use the following syntax for an email address text field: <input type="text" name="email">.

28 : Placeholder text is used to give people a hint about what kind of information to enter into an input. 
     For example, <input type="text" placeholder="Email address">.

29 : To prevent a user from submitting your form when required information is missing, 
     you need to add the required attribute to an input element. 
    
30 : Use the button element to create a clickable button
     The default behavior of clicking a form button without any attributes submits the form to the location specified in the form's action attribute.

31 : Even though you added your button below the text input, 
     they appear next to each other on the page. 
     That's because both input and button elements are inline elements, 
     which don't appear on new lines. The button you added will submit the form by default. 
     However, relying on default behavior may cause confusion. 
     Add the type attribute with the value submit to the button to make it clear that it is a submit button.

32 : You can use radio buttons for questions where you want only one answer out of multiple options.

33 : label elements are used to help associate the text for an input element with the input element itself 
     (especially for assistive technologies like screen readers). 
     For example, <label><input type="radio"> cat</label> makes it so clicking the word cat also selects the corresponding radio button.

34 : The id attribute is used to identify specific HTML elements. 
     Each id attribute's value must be unique from all other id values for the entire page.

35 : Notice that both radio buttons can be selected at the same time. 
     To make it so selecting one radio button automatically deselects the other, 
     both buttons must have a name attribute with the same value.

36 : If you select the Indoor radio button and submit the form, 
     the form data for the button is based on its name and value attributes. 
     Since your radio buttons do not have a value attribute, 
     the form data will include indoor-outdoor=on, 
     which is not useful when you have multiple buttons.
     Add a value attribute to both radio buttons. 
     For convenience, set the button's value attribute to the same value as its id attribute.

37 : The fieldset element is used to group related inputs and labels together in a web form. 
     fieldset elements are block-level elements, meaning that they appear on a new line.

>>>  difference between block element and inline element

38 : The legend element acts as a caption for the content in the fieldset element. 
     It gives users context about what they should enter into that part of the form.

39 : Forms commonly use checkboxes for questions that may have more than one answer

40 : There's another way to associate an input element's text with the element itself. 
     You can nest the text within a label element and add a for attribute with the same value as the input element's id attribute.

41 : Add the name attribute with the value personality to the checkbox input element.
     While you won't notice this in the browser, 
     doing this makes it easier for a server to process your web form, especially when there are multiple checkboxes.

42 : Like radio buttons, 
     form data for selected checkboxes are name / value attribute pairs. 
     While the value attribute is optional, 
     it's best practice to include it with any checkboxes or radio buttons on the page.

43 : In order to make a checkbox checked or radio button selected by default, 
     you need to add the checked attribute to it. 
     There's no need to set a value to the checked attribute. 
     Instead, just add the word checked to the input element, 
     making sure there is space between it and other attributes.

44 : Notice that everything you've added to the page so far is inside the body element. 
     All page content elements that should be rendered to the page go inside the body element. 
     However, other important information goes inside the head element.

45 : The title element determines what browsers show in the title bar or tab for the page.

46 : Add the lang attribute with the value en to the opening html tag to specify that the language of the page is English.

47 : All pages should begin with <!DOCTYPE html>. 
     This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications.

### Learn basic CSS by building Cafe menu ###

48 : Add the <!DOCTYPE html> tag, and an html element with a lang attribute of en.

47 : The title is one of several elements that provide extra information not visible on the web page, 
     but it is useful for search engines or how the page gets displayed.

49 : Inside the head element, 
     nest a meta element with an attribute named charset set to the value utf-8 to tell the browser how to encode characters for the page. 
     Note that meta elements are self-closing.
>>> ### CSS starts Here
50 : Up until now, you have been limited regarding the presentation and appearance of the content you create. 
     To start taking control, add a style element within the head element.

51 : You can add style to an element by specifying it in the style element and setting a property

52 : You now have three type selectors with the exact same styling. 
     You can add the same group of styles to many elements by creating a list of selectors
     
     selector1, selector2 {
          property: value;
     }

53  : You have styled three elements by writing CSS inside the style tags. 
      This works, but since there will be many more styles, it's best to put all the styles in a separate file and link to it.

54 : Now you need to link the styles.css file so the styles will be applied again. 
     Nest a self-closing link element in the head element. 
     Give it a rel attribute value stylesheet and an href attribute value of styles.css.

55 : For the styling of the page to look similar on mobile as it does on a desktop or laptop, 
     you need to add a meta element with a special content attribute.

56 : The div element is used mainly for design layout purposes unlike the other content elements you have used so far. 
     Add a div element inside the body element and then move all the other elements inside the new div.

57 : The goal now is to make the div not take up the entire width of the page. 
     The CSS width property is perfect for this. 
     Create a new type selector in the style sheet that gives your div element a width of 300px.

58 : The goal now is to make the div not take up the entire width of the page. 
     The CSS width property is perfect for this. 
     Create a new type selector in the style sheet that gives your div element a width of 300px.

59 : Now it's easy to see that the text is centered inside the div element. 
     Currently, the width of the div element is specified in pixels (px). 
     Change the width property's value to be 80%, to make it 80% the width of its parent element (body)

60 : Next, you want to center the div horizontally. 
     You can do this by setting its margin-left and margin-right properties to auto. 
     Think of the margin as invisible space around an element. 
     Using these two margin properties, 
     center the div element within the body element.

60 : So far you have been using type selectors to style elements. 
     A class selector is defined by a name with a dot directly in front of it, 
     like this:

     .class-name {
     styles
     }

61 : To apply the class's styling to the div element, 
     add a class attribute to the div element's opening tag and set its value to menu.

62 : Delete the comment and its contents inside the body type selector. 
     Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)

63 : It’s looking good. 
     Time to start adding some menu items. 
     Add an empty article element under the Coffee heading. 
     It will contain a flavor and price of each coffee you currently offer.

64 : article elements commonly contain multiple elements that have related information.

65 : p elements are block-level elements, so they take up the entire width of their parent element.
     To get them on the same line, you need to apply some styling to the p elements so they behave more like inline elements

66 : The p elements are nested in an article element with the class attribute of item. 
     You can style all the p elements nested anywhere in elements with a class named item like this:

     .item p { }

     Using the above selector, add a display property with value inline-block so the p elements behave more like inline elements.

67 : That's closer, 
     but the price didn't stay over on the right. 
     This is because inline-block elements only take up the width of their content.

     To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each.

68 : That worked, 
     but there is still a little space on the right of the price.
     You could keep trying various percentages for the widths. 
     Instead, 
     use the back space key on your keyboard to move the p element with the class price next to the p element with the class flavor 
     so that they are on the same line in the editor. 
     Make sure there is no space between them.

69 : Now go ahead and change both the flavor and price class' widths to be 50% again.

70 : If you make the width of the page preview smaller, 
     you will notice at some point, 
     some of the text on the left starts wrapping around to the next line. 
     This is because the width of the p elements on the left side can only take up 50% of the space.

71 : Since all 4 sides of the menu have the same internal spacing, 
     go ahead and delete the four properties and use a single padding property with the value 20px.

72 : The current width of the menu will always take up 80% of the body element's width. 
     On a very wide screen, 
     the coffee and dessert appear far apart from their prices

     Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.

73 : You can change the font-family of text, 
     to make it look different from the default font of your browser. 
     Each browser has some common fonts available to it.
     
     Change all the text in your body, by adding a font-family property with the value sans-serif. This is a fairly common font that is very readable.

74 : You can add a fallback value for the font-family by adding another font name separated by a comma. 
     Fallbacks are used in instances where the initial is not found/available.

75 : Make the Est. 2020 text italicized by creating an established class selector and giving it the font-style property with the value italic.

76 : The typography of heading elements (e.g. h1, h2) is set by default values of users' browsers.
     Add two new type selectors (h1 and h2). 
     Use the font-size property for both, but use the value 40px for the h1 and 30px for the h2.

77 : You can use an hr element to display a divider between sections of different content

78 : The default properties of an hr element will make it appear as a thin light grey line. 
     You can change the height of the line by specifying a value for the height property.

79 : Notice how the thickness of the line looks bigger? The default value of a property named border-width is 1px for all edges of hr elements. 
     By changing the border to the same color as the background, 
     the total height of the line is 5px (3px plus the top and bottom border width of 1px).
     Change the height property of the hr to be 2px, so the total height of it becomes 4px.

80 : The default color of a link that has not yet been clicked on is typically blue. 
     The default color of a link that has already been visited from a page is typically purple.

81 : To make the footer links the same color regardless if a link has been visited, 
     use a type selector for the anchor element (a) and use the value black for the color property.

>>> pseudo-selector

82 : You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like 
     a:visited { propertyName: propertyValue; }

83 : You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like 
     a:hover { propertyName: propertyValue; }.

84 : You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like 
     a:active { propertyName: propertyValue; }

85 : img elements are "like" inline elements

86 : To make the image behave like heading elements (which are block-level), 
     create an img type selector 
     and use the value block for the display property 
     and use the applicable margin-left and margin-right values to center it horizontally

87 : It would be nice if the vertical space between the h2 elements and their associated icons was smaller. 
     The h2 elements have default top and bottom margin space, 
     so you could change the bottom margin of the h2 elements to say 0 or another number.
     There is an easier way, 
     simply add a negative top margin to the img elements to pull them up from their current positions. 
     Negative values are created using a "-"(minus) in front of the value. 
     To complete this project, 
     go ahead and use a negative top margin of 25px in the img type selector.

### Building Set Of coloured Markers ###

88 : Add a DOCTYPE html declaration at the top of the document, 
     and an html element after that. 
     Give the html element a lang attribute with en as its value.

89 : Nest a head element within the html element. Just after the head element, add a body element.

90 : Remember that the title element gives search engines extra information about the page. 
     It also displays the content of that title element in two more ways:
     -> in the title bar when the page is open
     -> in the browser tab for the page when you hover on it. 
        Even if that tab is not active, once you hover on the tab, the title text is displayed

91 : To tell browsers how to encode characters on your page, 
     set the charset to utf-8. 
     utf-8 is a universal character set that includes almost every character from all human languages. 
     Inside the head element, 
     nest a meta element with the attribute charset set to utf-8. 
     Remember that meta elements are self-closing, and do not need a closing tag.

92 : You can have multiple self-closing meta elements on a web page. 
     Each meta element adds information about the page that cannot be expressed by other HTML elements.

93 : To center your marker on the page, 
     set its margin property to auto. 
     This sets margin-top, margin-right, margin-bottom, and margin-left all to auto.

94 : When the shorthand margin property has two values, 
     it sets margin-top and margin-bottom to the first value, 
         and margin-left and margin-right to the second value.

95 : To give the markers different colors, 
     you will need to add a unique class to each one. 
     Multiple classes can be added to an element by listing them in the class attribute and separating them with a space.

     If you add multiple classes to an HTML element, 
     the styles of the first classes you list may be overridden by later classes.

96 : There are two main color models: 
     -> the additive RGB (red, green, blue) model used in electronic devices, and 
     -> the subtractive CMYK (cyan, magenta, yellow, black) model used in print. 
     In this project, you'll work with the RGB model. 
     -> This means that colors begin as 
        black, and change as different levels of red, green, and blue are introduced. 
        An easy way to see this is with the CSS rgb function. 
        Create a new CSS rule that targets the class container and set its background-color to black with rgb(0, 0, 0).

97 : A function is a piece of code that can take an input and perform a specific action. 
     The CSS rgb function accepts values, or arguments, for red, green, and blue, and produces a color:rgb(red, green, blue);
     Each red, green, and blue value is a number from 0 to 255. 
     0 means that there's 0% of that color, and is black. 
     255 means that there's 100% of that color.
     In the .one CSS rule, replace the color keyword red with the rgb function. 
     For the rgb function, 
     -> set the value for red to 255, 
     -> the value for green to 0, and 
     -> the value for blue to 0.

98 : While the red and blue markers look the same, 
     the green one is much lighter than it was before. 
     This is because the green color keyword is actually a darker shade, 
     and is about halfway between black and the maximum value for green.
     In the .two CSS rule, set the green value in the rgb function to 127 to lower its intensity.

99 : In the additive RGB color model, 
     primary colors are colors that, when combined, create pure white. 
     But for this to happen, each color needs to be at its highest intensity.

100 : >>> primary color : set value of blue or green or red to 255
      Secondary colors are the colors you get when you combine primary colors. 
      You might have noticed some secondary colors in the last step as you changed the red, green, and blue values.
      >>> secondary color : set value of blue or green to 255 , red or blue to 255, green or red to 255
      Now that you're familiar with secondary colors, 
      you'll learn how to create tertiary colors. 
      Tertiary colors are created by combining a primary with a nearby secondary color.
      >>> tertiary color : set value of blue to 255 and green to 127 or vice versa

101 : A color wheel is a circle where similar colors, or hues, are near each other, and different ones are further apart. 
      For example, pure red is between the hues rose and orange.
      Two colors that are opposite from each other on the color wheel are called complementary colors
      If two complementary colors are combined, they produce gray
      But when they are placed side-by-side, these colors produce strong visual contrast and appear brighter.
      This contrast can be distracting 
      if it's overused on a website, and can make text hard to read if it's placed on a complementary-colored background.
      It's better practice to choose one color as the dominant color, 
      and use its complementary color as an accent to bring attention to certain content on the page

102 : A very common way to apply color to an element with CSS is with hexadecimal or hex values. 
      While hex values sound complicated, they're really just another form of RGB values.
      Hex color values start with a # character and take six characters from 0-9 and A-F
      The first pair of characters represent red, 
      the second pair represent green, and 
      the third pair represent blue

103 : You may already be familiar with decimal, 
      or base 10 values, which go from 0 - 9. Hexadecimal, or base 16 values, go from 0 - 9, then A - F,
      With hex colors, 00 is 0% of that color, and FF is 100%

104 : The HSL color model, or hue, saturation, and lightness, is another way to represent colors.
      The CSS hsl function accepts 3 values: 
      a number from 0 to 360 for hue, 
      a percentage from 0 to 100 for saturation, 
      and a percentage from 0 to 100 for lightness.

      If you imagine a color wheel, the hue red is at 0 degrees, green is at 120 degrees, and blue is at 240 degrees.
      Saturation is the intensity of a color from 0%, or gray, to 100% for pure color. 
      You must add the percent sign % to the saturation and lightness values.
      Lightness is how bright a color appears, from 0%, or complete black, to 100%, complete white, with 50% being neutral.

105 : You've learned a few ways to set flat colors in CSS, but you can also use a color transition, or gradient, on an element.
      A gradient is when one color transitions into another. The CSS linear-gradient function lets you control the direction of the transition along a line, and which colors are used.
      One thing to remember is that the linear-gradient function actually creates an image element, and is usually paired with the background property which can accept an image as a value.

106 : The linear-gradient function is very flexible -- here is the basic syntax you'll use in this tutorial:
      linear-gradient(gradientDirection, color1, color2, ...);
      gradientDirection is the direction of the line used for the transition. 
      color1 and color2 are color arguments, 
      which are the colors that will be used in the transition itself. 
      These can be any type of color, including color keywords, hex, rgb, or hsl.
      linear-gradient function accepts n number of color as arguments

107 : Color-stops allow you to fine-tune where colors are placed along the gradient line. 
      They are a length unit like px or percentages that follow a color in the linear-gradient function.
      In the linear-gradient function, 
      add a 75% color stop after the first red color argument. Do not add color stops to the other colors arguments
     .red {
               background: linear-gradient(90deg, rgb(255, 0, 0) 75%, rgb(0, 255, 0), rgb(0, 0, 255));
          }

108 : Even without the color-stops, 
      you might have noticed that the colors for the green marker transition at the same points as the red marker. 
      The first color is at the start (0%), 
      the second is in the middle (50%), 
      and the last is at the end (100%) of the gradient line.

      The linear-gradient function automatically calculates these values for you, 
      and places colors evenly along the gradient line by default

109 : If no gradientDirection argument is provided to the linear-gradient function, 
      it arranges colors from top to bottom, or along a 180 degree line, by default.

110 : Opacity describes how opaque, or non-transparent, something is
      With the CSS opacity property, 
      you can control how opaque or transparent an element is. 
      With the value 0, or 0%, the element will be completely transparent, and at 1.0, or 100%, 
      the element will be completely opaque like it is by default.

111 : Another way to set the opacity for an element is with the alpha channel. Similar to the opacity property, the alpha channel controls how transparent or opaque a color is.

112 :  To add an alpha channel to an rgb color, use the rgba function instead. 
       The rgba function works just like the rgb function, but takes one more number from 0 to 1.0 for the alpha channel

113 : You can also use an alpha channel with hsl and hex colors. You will see how to do that soon

114 : after creating cap class div 
      It looks like your sleeve disappeared, 
      but don't worry -- it's still there. 
      What happened is that your new cap div is taking up the entire width of the marker, and is pushing the sleeve down to the next line.
      This is because the default display property for div elements is block. 
      So when two block elements are next to each other, they stack like actual blocks.
      To position two div elements on the same line, set their display properties to inline-block.

115 : All HTML elements have borders, 
      though they're usually set to none by default. 
      With CSS, you can control all aspects of an element's border, and set the border on all sides, or just one side at a time. 
      For a border to be visible, you need to set its width and style.

116 : Borders have several styles to choose from. 
      You can make your border a solid line, 
      but you can also use a dashed or dotted line if you prefer. 
      Solid border lines are probably the most common.

117 : Your border should be visible now. 
      If no color is set, black is used by default. 
      But to make your code more readable, it's better to set the border color explicitly.
     
118 : The border-left shorthand property lets you to set the left border's width, style, and color at the same time.

119 : Your marker is looking good. But to make it look even more realistic, you can change the border style to double solid borders.

120 : The last thing you'll do is add a slight shadow to each marker to make them look even more realistic.
      The box-shadow property lets you apply one or more shadows around an element. 
      Here is basic syntax: 
      box-shadow: offsetX offsetY color;
     
121 : Here's how the offsetX and offsetY values work:
      >>> both offsetX and offsetY accept number values in px and other CSS units
      >>> a positive offsetX value moves the shadow right and a negative value moves it left
      >>> a positive offsetY value moves the shadow down and a negative value moves it up
      >>> if you want a value of zero (0) for any or both offsetX and offsetY, 
          you don't need to add a unit. 
          Every browser understands that zero means no change.
      >>> The height and width of the shadow is determined by the height and width of the element it's applied to. 
          You can also use an optional spreadRadius value to spread out the reach of the shadow

122 : Notice that the edges of the shadow are sharp. 
      This is because there is an optional blurRadius value for the box-shadow property:
      box-shadow: offsetX offsetY blurRadius color;

123 : But what if you wanted to expand the shadow out further? 
      You can do that with the optional spreadRadius value:
      box-shadow: offsetX offsetY blurRadius spreadRadius color;

124 : Remember that you don't need to add units to a zero value.

### Registration Form ###
125 : doctype, html, head, body

126 : Please fill out this form with the required information

127 : The rem unit stands for root em, and is relative to the font size of the html element

128 : As label elements are inline by default, they are all displayed side by side on the same line, making their text hard to read. To make them appear on separate lines, add display: block to the label element,

129 : Following accessibility best practices, 
      link the input elements and the label elements together using the for attribute and Use  values for the respective id attributes.

130 : Specifying the type attribute of a form element is important for the browser to know what kind of data it should expect. 
      If the type is not specified, the browser will default to text.
      The email type only allows emails with a @ and a . in the domain. 
      The password type obscures the input, and warns if the site does not use HTTPS.

131 : The first input element with a type of submit is automatically set to submit its nearest parent form element.
      To handle the form submission, 
      after the last fieldset element add an input element with the type attribute set to submit and the value attribute set to Submit.

132 : To make the form more interactive, 
      add the required attribute to the input elements in the first fieldset.
      Now, if you try to submit the form without filling in the required fields, 
      you will see an error message.

133 : Certain type attribute values come with built-in form validation. 
      For example, type="email" requires that the value be a valid email address.
      Add custom validation to the password input element, 
      by adding a minlength attribute with a value of 8. 
      Doing so prevents inputs of less than 8 characters being submitted.

134 : With type="password" you can use the pattern attribute to define a regular expression that the password must match to be considered valid.
      Add a pattern attribute to the password input element to require the input match: [a-z0-5]{8,}

135 : You only want one radio input to be selectable at a time. 
      However, the form does not know the radio inputs are related.
      To relate the radio inputs, give them the same name attribute

136 : Currently users can submit the form without checking the radio inputs. 
      Although you previously used the required attribute to indicate that an input is required, 
      it won't work in this case because adding required to both inputs will convey the wrong information to users.

      To solve this, 
      you can provide context of what is needed by adding a legend element with text Account type (required) before the label elements within the second fieldset.
      Then add the checked attribute to the Personal input to ensure the form is submitted with the required data in it.

137 : You can select the last element of a specific type using the last-of-type CSS pseudo-class, like this:
      p:last-of-type { }
      That will select the last p element. Create a new selector that targets the last fieldset element

136 : Select only the .inline elements, and give them width of unset. 
      This will remove the earlier rule which set all the input elements to width: 100%.

##### SET 2 #####

### rothko painting ###
137 : In the CSS box model, every HTML element is treated as a box with four areas

### flex box photo gallery ###
138 : Within your head element, add a meta tag with the name set to viewport and the content set to width=device-width, initial-scale=1.
139 : Notice how the blue image border extends beyond the red gallery border. 
      This is due to the way browsers calculate the size of container elements.
      The box-sizing property is used to set this behavior. 
      By default, the content-box model is used. 
      With this model, when an element has a specific width, that width is calculated based only on the element's content. 
      Padding and border values get added to the total width, so the element grows to accommodate these values.
      Try setting box-sizing to content-box explicitly, with the global * selector. 
      At this point, you will not see any changes, because you are using the default value.
140 : The border-box sizing model does the opposite of content-box. 
      The total width of the element, including padding and border, will be the explicit width set. 
      The content of the element will shrink to make room for the padding and border.
141 : Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.
      To use it, give an element a display property of flex. 
      This will make the element a flex container. Any direct children of a flex container are called flex items.
142 : Flexbox has a main and cross axis. 
      The main axis is defined by the flex-direction property, which has four possible values:
      row (default): horizontal axis with flex items from left to right
      row-reverse: horizontal axis with flex items from right to left
      column: vertical axis with flex items from top to bottom
      column-reverse: vertical axis with flex items from bottom to top
143 : The flex-wrap property determines how your flex items behave when the flex container is too small. 
      Setting it to wrap will allow the items to wrap to the next row or column. 
      nowrap (default) will prevent your items from wrapping and shrink them if needed.
144 : The justify-content property determines how the items inside a flex container are positioned along the main axis, 
      affecting their position and the space around them.
145 : The align-items property positions the flex content along the cross axis. 
      In this case, with your flex-direction set to row, your cross axis would be vertical.
      To vertically center your images, give your .gallery selector an align-items property with center as the value.
146 : Notice how some of your images have become distorted. 
      This is because the images have different aspect ratios. 
      Rather than setting each aspect ratio individually, you can use the object-fit property to determine how images should behave
147 : The gap CSS shorthand property sets the gaps, also known as gutters, between rows and columns. 
      The gap property and its row-gap and column-gap sub-properties provide this functionality for flex, grid, and multi-column layout. 
      You apply the property to the container element.
148 : The ::after pseudo-element creates an element that is the last child of the selected element. 
      You can use it to add an empty element after the last image. 
      If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. 
      Right now, it is in the center because you set justify-content: center on the flex container.
### typography by nutrition label ###
149 : If you inspect your .label element with your browser's developer tools, you may notice that it's actually 288 pixels wide instead of 270. 
      This is because, by default, the browser includes the border and padding when determining an element's size.
      To solve this, reset the box model by creating a * selector and giving it a box-sizing property of border-box.
150 : The rem unit stands for root em, and is relative to the font size of the html element.
151 : The :not pseudo-selector can be used to select all elements that do not match the given CSS rule.
### building a quiz ###
152 : 
153 : 
154 : Another important meta element for accessibility and SEO is the description definition. 
      The value of the content attribute is used by search engines to provide a description of your page.
      Add a meta element with the name attribute set to description, and give it a useful content attribute.
155 : Lastly in the head, the title element is useful for screen readers to understand the content of a page. 
      Furthermore, it is an important part of SEO.
      Give your page a title that is descriptive and concise.
156 : Navigation is a core part of accessibility, and screen readers rely on you to provide the structure of your page. 
      This is accomplished with semantic HTML elements.
      Add a header and a main element to your page.
      The header element will be used to introduce the page, as well as provide a navigation menu.
      The main element will contain the core content of your page.
157 : 
158 : A useful property of an SVG (scalable vector graphics) is that it contains a path attribute which allows the image to be scaled without affecting the resolution of the resultant image.
      img {width: max(250px, 25vw);}
159 : The child combinator selector > is used between selectors to target only elements that match the second selector and are a direct child of the first selector.
160 : To increase the page accessibility, 
      the role attribute can be used to indicate the purpose behind an element on the page to assistive technologies. 
      The role attribute is a part of the Web Accessibility Initiative (WAI), and accepts preset values.
161 : Every region role requires a label, 
      which helps screen reader users understand the purpose of the region. 
      One method for adding a label is to add a heading element inside the region and then reference it with the aria-labelledby attribute.
162 : Even though you added a placeholder to the first input element in the previous lesson, 
      this is actually not a best-practice for accessibility; too often, 
      users confuse the placeholder text with an actual input value - they think there is already a value in the input.
      Remove the placeholder text from the first input element, relying on the label being the best-practice.
163 : Certain types of motion-based animations can cause discomfort for some users. 
      In particular, people with vestibular disorders have sensitivity to certain motion triggers.
      The @media at-rule has a media feature called prefers-reduced-motion to set CSS based on the user's preferences. 
      It can take one of the following values:    
      # reduce
      # no-preference
      @media (feature: value) {
          selector {
          styles
          }
      }
164 : Finally, the navigation accessibility can be improved by providing keyboard shortcuts.
      The accesskey attribute accepts a space-separated list of access keys. For example:
      <button type="submit" accesskey="s">Submit</button>
      Give each of the navigation links a single-letter access key.
      Note: It is not always advised to use access keys, but they can be useful
      Well done. You have completed the Accessibility Quiz practice project
165 : The span[class~="sr-only"] selector will select any span element whose class includes sr-only
166 : The CSS clip property is used to define the visible portions of an element. 
      Set the span[class~="sr-only"] selector to have a clip property of rect(1px, 1px, 1px, 1px).
      The clip-path property determines the shape the clip property should take. 
      Set the clip-path property to the value of inset(50%), forming the clip-path into a rectangle within the element.
167 : The :first-of-type pseudo-selector is used to target the first element that matches the selector. 
      Create an h1 .flex span:first-of-type
168 : The :last-of-type pseudo-selector does the exact opposite - it targets the last element that matches the selector.
169 : The calc() function is a CSS function that allows you to calculate a value based on other values. 
      For example, you can use it to calculate the width of the viewport minus the margin of an element:
          .example {
          margin: 10px;
          width: calc(100% - 20px);
          }
      Give #years a margin of 0 -2px, and a padding set to 0.5rem calc(1.25rem + 2px) 0.5rem 0.
170 : Style the text within your #years element by creating a #years span[class] selector
171 : The :not() pseudo-selector is used to target all elements that do not match the selector - in this case, 
      any of your span elements that do not have the sr-only class. 
      This ensures that your earlier rules for the span[class~="sr-only"] selector are not overwritten.
172 : The [attribute="value"] selector targets any element that has an attribute with a specific value. 
      Create a tr[class="total"] selector to target specifically your tr elements with the total class
173 : The key difference between tr[class="total"] and tr.total is that the first will select tr elements where the only class is total. 
      The second will select tr elements where the class includes total.
174 : The :nth-of-type() pseudo-selector is used to target specific elements based on their order among siblings of the same type. 
      Use this pseudo-selector to target the third td element within your total table rows. Give it a right padding of 0.5rem.

### cat painting ###

175 : CSS positioning lets you set how you want an element to be positioned in the browser. 
      It has a position property you can set to static, absolute, relative, sticky or fixed.
      Once you set the position property of the element, you can move the element around by setting a pixel or a percentage value for one or more of the top, right, left, or bottom properties.
      static is the default positioning for all elements. 
      If you assign it to an element, you won't be able to move it around with top, right, left, or bottom.
      Give .cat-head a position property of static, then set the top and left properties to 100px each.
176 : When you use the relative value, 
      the element is still positioned according to the normal flow of the document, but the top, left, bottom, and right values become active.
177 : The next position property is absolute. When you use the absolute value for your position property, 
      the element is taken out of the normal flow of the document, 
     and then its position is determined by the top, right, bottom, and left properties.
178 : fixed is a position property value that lets you make an element fixed to the page no matter where the user scrolls to on the page.
179 : The last position property value is sticky. sticky positioning is a hybrid of relative and fixed positioning. 
      It allows an element to stick to a specific position within its containing element or viewport, based on the scroll position.
180 : Give the .cat-head element a position property set to absolute. 
      Set a value of 0 for the right, left, top, bottom properties, 
      then set its margin property on all sides to auto. 
      That's one way to center an element vertically and horizontally using CSS positioning.
181 : To position the left ear properly, 
      you can use CSS transform to rotate it in a certain degree.
      The transform property allows you to modify the shape, position, and size of an element without changing the layout or affecting the surrounding elements. 
      It has functions such as translate(), rotate(), scale(), skew(), and matrix().
      Set the transform property to rotate(-45deg) and see what happens.
182 : z-index is a property you can use to define the order of overlapping HTML elements. 
      Any element with a higher z-index will always be positioned over an element with a lower z-index.

### Piano ###
183 : The ::before selector creates a pseudo-element which is the first child of the selected element, 
      while the ::after selector creates a pseudo-element which is the last child of the selected element. 
      These pseudo-elements are often used to create cosmetic content.
184 : The content property is used to set or override the content of the element. 
      By default, the pseudo-elements created by the ::before and ::after pseudo-selectors are empty, 
      and the elements will not be rendered to the page. 
      Setting the content property to an empty string "" will ensure the element is rendered to the page while still being empty.
185 : The @media at-rule, also known as a media query, is used to conditionally apply CSS. 
      Media queries are commonly used to apply CSS based on the viewport width using the max-width and min-width properties.
### city skyline ###
186 : Variable declarations begin with two dashes (-) and are given a name and a value like this: 
      --variable-name: value;. 
       To use a variable, 
       put the variable name in parentheses with var in front of them like this: 
       var(--variable-name). 
       Whatever value you gave the variable will be applied to whatever property you use it on.
187 : var(--variable-name, fallback-value). 
      The property will use the fallback value when there's a problem with the variable.
188 : variables are often declared in the :root selector. 
      This is the highest level selector in CSS; putting your variables there will make them usable everywhere. 
      Add the :root selector to the top of your stylesheet, and move all your variable declarations there.
189 : Gradients in CSS are a way to transition between colors across the distance of an element. 
      They are applied to the background property and the syntax looks like this:

     gradient-type(
          color1,
          color2
     );
190 : So far, all the gradients you created have gone from top to bottom, that's the default direction. 
      You can specify another direction by adding it before your colors like this:
      gradient-type(
          direction,
          color1,
          color2
      );

### Magazine ###
191 : The Referer HTTP header contains information about the address or URL of a page that a user might be visiting from. 
      This information can be used in analytics to track how many users from your page visit freecodecamp.org, 
      for example. Setting the rel attribute to noreferrer omits this information from the HTTP request. 
      Give your a element a rel attribute set to noreferrer.

192 : CSS Grid offers a two-dimensional grid-based layout, 
      allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements.

193 : Use the minmax function to make your columns responsive on any device. 
      The minmax function takes two arguments, 
      the first being the minimum value and the second being the maximum. 
      These values could be a length, percentage, fr, or even a keyword like max-content

194 : To add space between rows in the grid layout, you can use the row-gap property

195 : One option is the grid-column property, which is shorthand for grid-column-start and grid-column-end. 
      The grid-column property tells the grid item which grid line to start and end at.

196 : The CSS repeat() function is used to repeat a value, rather than writing it out manually, 
      and is helpful for grid layouts. 
      For example, setting the grid-template-columns property to repeat(20, 200px) would create 20 columns each 200px wide.

197 : Remember that the grid-column property determines which columns an element starts and ends at. 
      There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. 
      To do this, you can use -1 for the end column.

198 : The object-fit property tells the browser how to position the element within its container. 
      In this case, cover will set the image to fill the container, cropping as needed to avoid changing the aspect ratio.

199 : If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional columns. 
      As an alternative, you can use the grid-auto-flow property. 
      This property takes either row or column as the first value, with an optional second value of dense. 
      grid-auto-flow uses an auto-placement algorithm to adjust the grid layout. 
      Setting it to column will tell the algorithm to create new columns for content as needed. 
      The dense value allows the algorithm to backtrack and fill holes in the grid with smaller items, which can result in items appearing out of order.

200 : Now the auto-placement algorithm will kick in when you add a new icon element. 
      However, the algorithm defaults the new column width to be auto, which will not match your current columns.

201 : Much like Flexbox, with CSS Grid you can align the content of grid items with align-items and justify-items. 
      align-items will align child elements along the column axis, and justify-items will align child elements along the row axis.

202 : The ::first-letter pseudo-selector allows you to target the first letter in the text content of an element.

203 : The gap property is a shorthand way to set the value of column-gap and row-gap at the same time. 
      If given one value, it sets the column-gap and row-gap both to that value. 
      If given two values, it sets the row-gap to the first value and the column-gap to the second.

204 : he place-items property can be used to set the align-items and justify-items values at the same time. 
      The place-items property takes one or two values. 
      If one value is provided, it is used for both the align-items and justify-items properties. 
      If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property.

### Ferris Wheel ###

205 :The transform-origin property is used to set the point around which a CSS transformation is applied. For example, when performing a rotate (which you will do later in this project), the transform-origin determines around which point the element is rotated.

206 : The @keyframes at-rule is used to define the flow of a CSS animation. Within the @keyframes rule, you can create selectors for specific points in the animation sequence, such as 0% or 25%, or use from and to to define the start and end of the sequence.

@keyframes rules require a name to be assigned to them, which you use in other rules to reference. For example, the @keyframes freeCodeCamp { } rule would be named freeCodeCamp.

207 : You now need to define how your animation should start. To do this, create a 0% rule within your @keyframes wheel rule. The properties you set in this nested selector will apply at the beginning of your animation.

208 : The animation-name property is used to link a @keyframes rule to a CSS selector. The value of this property should match the name of the @keyframes rule. Give your .wheel selector an animation-name property set to wheel.

209 : The animation-iteration-count property sets how many times your animation should repeat. This can be set to a number, or to infinite to indefinitely repeat the animation. Your Ferris wheel should never stop, so set the .wheel selector to have an animation-iteration-count of infinite.

The animation-timing-function property sets how the animation should progress over time. There are a few different values for this property, but you want the Ferris wheel animation to run at the same rate from start to finish. Set the animation-timing-function to linear in your .wheel selector.

210 : Set the animation property of the .cabin rule to cabins 10s linear infinite. This will set the animation-name, animation-duration, animation-timing-function, and animation-iteration-count properties in that order.

211 : To make the mountain look more like a mountain, you can use the skew transform function, which takes two arguments. The first being an angle to shear the x-axis by, and the second being an angle to shear the y-axis by.