>>> CatPhotApp

1 : HTML elements have opening tags like <h1> and closing tags like </h1>.
    The text for an element goes between its opening and closing tags.

2 : The h1 through h6 heading elements are used to signify the importance of content below them. 
    The lower the number, the higher the importance, 
    so h2 elements have less importance than h1 elements. 
    Only use one h1 element per page and place lower importance headings below higher importance headings.

3 : The p element is used to create a paragraph of text on websites.

4 : Commenting allows you to leave messages without affecting the browser display. 
    It also allows you to make code inactive. 
    A comment in HTML starts with <!--, contains any number of lines of text, and ends with -->

5 : HTML5 has some elements that identify different content areas. 
    These elements make your HTML easier to read and help with Search Engine Optimization (SEO) and accessibility.

6 : In the previous step, 
    you put the h1, h2, comment, and p elements inside the main element. 
    This is called nesting. 
    Nested elements should be placed two spaces further to the right of the element they are nested in. 
    This spacing is called indentation and it is used to make HTML easier to read.

7 : You can add images to your website by using the img element. 
    img elements have an opening tag without a closing tag. 
    A tag for an element without a closing tag is known as a self-closing tag.

8 : HTML attributes are special words used inside the opening tag of an element to control the element's behavior.
    The src attribute in an img element specifies the image's URL (where the image is located).

9 : All img elements should have an alt attribute. 
    The alt attribute's text is used for screen readers to improve accessibility and is displayed if the image fails to load.

10 : You can link to another page with the anchor (a) element

11 : A link's text must be placed between the opening and closing tags of an anchor (a) element.

12 : In the previous step you turned the words link to cat pictures into a link by placing them between opening and closing anchor (a) tags. You can do the same to words inside of an element, such as a p element.

13 : Add a target attribute with the value _blank to the anchor (a) element's opening tag, 
     so that the link opens in a new tab.

14 : In previous steps you used an anchor element to turn text into a link. 
     Other types of content can also be turned into a link by wrapping it in anchor tags. 
     Turn the image into a link by surrounding it with necessary element tags.

15 : Before adding any new content, 
     you should make use of a section element to separate the cat photos content from the future content.

16 : When you add a lower rank heading element to the page, 
     it's implied that you're starting a new subsection. 
     After the last h2 element of the second section element, 
     add an h3 element with this text:

16 : add an unordered list (ul) element. 

17 : Use list item (li) elements to create items in a list

18 : The figure element represents self-contained content and will allow you to associate an image with a caption.

19 : A figure caption (figcaption) element is used to add a caption to describe the image contained within the figure element.

20 : Emphasize the word love in the figcaption element by wrapping it in an emphasis em element.

22 : The code for an ordered list (ol) is similar to an unordered list, but list items in an ordered list are numbered when displayed.

23 : The strong element is used to indicate that some text is of strong importance or urgent.

24 : The action attribute indicates where form data should be sent. 
     For example, <form action="/submit-url"></form> tells the browser that the form data should be sent to the path /submit-url.

25 : The input element allows you several ways to collect data from a web form. 
     Like img elements, input elements are self-closing and do not need closing tags.

26 : There are many kinds of inputs you can create using the type attribute. 
     You can easily create a password field, reset button, or a control to let users select a file from their computer.

27 : In order for a form's data to be accessed by the location specified in the action attribute, 
     you must give the text field a name attribute and assign it a value to represent the data being submitted. 
     For example, you could use the following syntax for an email address text field: <input type="text" name="email">.

28 : Placeholder text is used to give people a hint about what kind of information to enter into an input. 
     For example, <input type="text" placeholder="Email address">.

29 : To prevent a user from submitting your form when required information is missing, 
     you need to add the required attribute to an input element. 
    
30 : Use the button element to create a clickable button
     The default behavior of clicking a form button without any attributes submits the form to the location specified in the form's action attribute.

31 : Even though you added your button below the text input, 
     they appear next to each other on the page. 
     That's because both input and button elements are inline elements, 
     which don't appear on new lines. The button you added will submit the form by default. 
     However, relying on default behavior may cause confusion. 
     Add the type attribute with the value submit to the button to make it clear that it is a submit button.

32 : You can use radio buttons for questions where you want only one answer out of multiple options.

33 : label elements are used to help associate the text for an input element with the input element itself 
     (especially for assistive technologies like screen readers). 
     For example, <label><input type="radio"> cat</label> makes it so clicking the word cat also selects the corresponding radio button.

34 : The id attribute is used to identify specific HTML elements. 
     Each id attribute's value must be unique from all other id values for the entire page.

35 : Notice that both radio buttons can be selected at the same time. 
     To make it so selecting one radio button automatically deselects the other, 
     both buttons must have a name attribute with the same value.

36 : If you select the Indoor radio button and submit the form, 
     the form data for the button is based on its name and value attributes. 
     Since your radio buttons do not have a value attribute, 
     the form data will include indoor-outdoor=on, 
     which is not useful when you have multiple buttons.
     Add a value attribute to both radio buttons. 
     For convenience, set the button's value attribute to the same value as its id attribute.

37 : The fieldset element is used to group related inputs and labels together in a web form. 
     fieldset elements are block-level elements, meaning that they appear on a new line.

>>>  difference between block element and inline element

38 : The legend element acts as a caption for the content in the fieldset element. 
     It gives users context about what they should enter into that part of the form.

39 : Forms commonly use checkboxes for questions that may have more than one answer

40 : There's another way to associate an input element's text with the element itself. 
     You can nest the text within a label element and add a for attribute with the same value as the input element's id attribute.

41 : Add the name attribute with the value personality to the checkbox input element.
     While you won't notice this in the browser, 
     doing this makes it easier for a server to process your web form, especially when there are multiple checkboxes.

42 : Like radio buttons, 
     form data for selected checkboxes are name / value attribute pairs. 
     While the value attribute is optional, 
     it's best practice to include it with any checkboxes or radio buttons on the page.

43 : In order to make a checkbox checked or radio button selected by default, 
     you need to add the checked attribute to it. 
     There's no need to set a value to the checked attribute. 
     Instead, just add the word checked to the input element, 
     making sure there is space between it and other attributes.

44 : Notice that everything you've added to the page so far is inside the body element. 
     All page content elements that should be rendered to the page go inside the body element. 
     However, other important information goes inside the head element.

45 : The title element determines what browsers show in the title bar or tab for the page.

46 : Add the lang attribute with the value en to the opening html tag to specify that the language of the page is English.

47 : All pages should begin with <!DOCTYPE html>. 
     This special string is known as a declaration and ensures the browser tries to meet industry-wide specifications.

>>> Learn basic CSS by building Cafe menu

48 : Add the <!DOCTYPE html> tag, and an html element with a lang attribute of en.

47 : The title is one of several elements that provide extra information not visible on the web page, 
     but it is useful for search engines or how the page gets displayed.

49 : Inside the head element, 
     nest a meta element with an attribute named charset set to the value utf-8 to tell the browser how to encode characters for the page. 
     Note that meta elements are self-closing.
>>> ### CSS starts Here
50 : Up until now, you have been limited regarding the presentation and appearance of the content you create. 
     To start taking control, add a style element within the head element.

51 : You can add style to an element by specifying it in the style element and setting a property

52 : You now have three type selectors with the exact same styling. 
     You can add the same group of styles to many elements by creating a list of selectors
     
     selector1, selector2 {
          property: value;
     }

53  : You have styled three elements by writing CSS inside the style tags. 
      This works, but since there will be many more styles, it's best to put all the styles in a separate file and link to it.

54 : Now you need to link the styles.css file so the styles will be applied again. 
     Nest a self-closing link element in the head element. 
     Give it a rel attribute value stylesheet and an href attribute value of styles.css.

55 : For the styling of the page to look similar on mobile as it does on a desktop or laptop, 
     you need to add a meta element with a special content attribute.

56 : The div element is used mainly for design layout purposes unlike the other content elements you have used so far. 
     Add a div element inside the body element and then move all the other elements inside the new div.

57 : The goal now is to make the div not take up the entire width of the page. 
     The CSS width property is perfect for this. 
     Create a new type selector in the style sheet that gives your div element a width of 300px.

58 : The goal now is to make the div not take up the entire width of the page. 
     The CSS width property is perfect for this. 
     Create a new type selector in the style sheet that gives your div element a width of 300px.

59 : Now it's easy to see that the text is centered inside the div element. 
     Currently, the width of the div element is specified in pixels (px). 
     Change the width property's value to be 80%, to make it 80% the width of its parent element (body)

60 : Next, you want to center the div horizontally. 
     You can do this by setting its margin-left and margin-right properties to auto. 
     Think of the margin as invisible space around an element. 
     Using these two margin properties, 
     center the div element within the body element.

60 : So far you have been using type selectors to style elements. 
     A class selector is defined by a name with a dot directly in front of it, 
     like this:

     .class-name {
     styles
     }

61 : To apply the class's styling to the div element, 
     add a class attribute to the div element's opening tag and set its value to menu.

62 : Delete the comment and its contents inside the body type selector. 
     Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg)

63 : It’s looking good. 
     Time to start adding some menu items. 
     Add an empty article element under the Coffee heading. 
     It will contain a flavor and price of each coffee you currently offer.

64 : article elements commonly contain multiple elements that have related information.

65 : p elements are block-level elements, so they take up the entire width of their parent element.
     To get them on the same line, you need to apply some styling to the p elements so they behave more like inline elements

66 : The p elements are nested in an article element with the class attribute of item. 
     You can style all the p elements nested anywhere in elements with a class named item like this:

     .item p { }

     Using the above selector, add a display property with value inline-block so the p elements behave more like inline elements.

67 : That's closer, 
     but the price didn't stay over on the right. 
     This is because inline-block elements only take up the width of their content.

     To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each.

68 : That worked, 
     but there is still a little space on the right of the price.
     You could keep trying various percentages for the widths. 
     Instead, 
     use the back space key on your keyboard to move the p element with the class price next to the p element with the class flavor 
     so that they are on the same line in the editor. 
     Make sure there is no space between them.

69 : Now go ahead and change both the flavor and price class' widths to be 50% again.

70 : If you make the width of the page preview smaller, 
     you will notice at some point, 
     some of the text on the left starts wrapping around to the next line. 
     This is because the width of the p elements on the left side can only take up 50% of the space.

71 : Since all 4 sides of the menu have the same internal spacing, 
     go ahead and delete the four properties and use a single padding property with the value 20px.

72 : The current width of the menu will always take up 80% of the body element's width. 
     On a very wide screen, 
     the coffee and dessert appear far apart from their prices

     Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.

73 : You can change the font-family of text, 
     to make it look different from the default font of your browser. 
     Each browser has some common fonts available to it.
     
     Change all the text in your body, by adding a font-family property with the value sans-serif. This is a fairly common font that is very readable.

74 : You can add a fallback value for the font-family by adding another font name separated by a comma. 
     Fallbacks are used in instances where the initial is not found/available.

75 : Make the Est. 2020 text italicized by creating an established class selector and giving it the font-style property with the value italic.

76 : The typography of heading elements (e.g. h1, h2) is set by default values of users' browsers.
     Add two new type selectors (h1 and h2). 
     Use the font-size property for both, but use the value 40px for the h1 and 30px for the h2.

77 : You can use an hr element to display a divider between sections of different content

78 : The default properties of an hr element will make it appear as a thin light grey line. 
     You can change the height of the line by specifying a value for the height property.

79 : Notice how the thickness of the line looks bigger? The default value of a property named border-width is 1px for all edges of hr elements. 
     By changing the border to the same color as the background, 
     the total height of the line is 5px (3px plus the top and bottom border width of 1px).
     Change the height property of the hr to be 2px, so the total height of it becomes 4px.

80 : The default color of a link that has not yet been clicked on is typically blue. 
     The default color of a link that has already been visited from a page is typically purple.

81 : To make the footer links the same color regardless if a link has been visited, 
     use a type selector for the anchor element (a) and use the value black for the color property.

>>> pseudo-selector

82 : You change properties of a link when the link has actually been visited by using a pseudo-selector that looks like 
     a:visited { propertyName: propertyValue; }

83 : You change properties of a link when the mouse hovers over them by using a pseudo-selector that looks like 
     a:hover { propertyName: propertyValue; }.

84 : You change properties of a link when the link is actually being clicked by using a pseudo-selector that looks like 
     a:active { propertyName: propertyValue; }

85 : img elements are "like" inline elements

86 : To make the image behave like heading elements (which are block-level), 
     create an img type selector 
     and use the value block for the display property 
     and use the applicable margin-left and margin-right values to center it horizontally

87 : It would be nice if the vertical space between the h2 elements and their associated icons was smaller. 
     The h2 elements have default top and bottom margin space, 
     so you could change the bottom margin of the h2 elements to say 0 or another number.
     There is an easier way, 
     simply add a negative top margin to the img elements to pull them up from their current positions. 
     Negative values are created using a "-"(minus) in front of the value. 
     To complete this project, 
     go ahead and use a negative top margin of 25px in the img type selector.